
name: 'PR Test'
on:
  workflow_dispatch:
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  version-bump:
    name: 'Version Bump'
    runs-on: [self-hosted, linux, flyweight]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.JENKINS_GITHUB_PAT }}
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: 'Install uv'
        uses: astral-sh/setup-uv@v6
      - name: 'Configure GitHub user'
        run: |
          git config user.name devops
          git config user.email devops@runtimeverification.com
      - name: 'Update version'
        run: |
          og_version=$(git show origin/${GITHUB_BASE_REF}:package/version)
          ./package/version.sh bump ${og_version}
          ./package/version.sh sub
          uv lock
          new_version=$(cat package/version)
          git add --update && git commit --message "Set Version: ${new_version}" || true
      - name: 'Push updates'
        run: git push origin HEAD:${GITHUB_HEAD_REF}

  code-quality-checks:
    needs: version-bump
    name: 'Code Quality Checks'
    runs-on: [self-hosted, linux, flyweight]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 'Setup Python 3.10'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: 'Get uv release'
        id: uv_release
        run: |
          echo uv_version=$(cat deps/uv_release) >> "${GITHUB_OUTPUT}"
      - name: 'Install uv'
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ steps.uv_release.outputs.uv_version }}
      - name: 'Run code quality checks'
        run: make check
      - name: 'Run pyupgrade'
        run: make pyupgrade
      - name: 'Run unit tests'
        run: make test-unit

  integration-tests:
    needs: code-quality-checks
    name: 'Integration Tests'
    runs-on: [self-hosted, linux, normal]
    env:
      CONTAINER: skribe-integration-${{ github.sha }}
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: 'Set up Docker'
        uses: ./.github/actions/with-docker
        with:
          container-name: ${CONTAINER}
      - name: 'Build semantics'
        run: docker exec --user user ${CONTAINER} make kdist-build
      - name: 'Run integration tests'
        run: docker exec --user user ${CONTAINER} make test-integration
      - name: 'Tear down Docker'
        if: always()
        run: docker stop --time=0 ${CONTAINER}

  nix:
    needs: code-quality-checks
    name: 'Nix Tests'
    strategy:
      fail-fast: false
      matrix:
        runner: [normal, MacM1]  # MacM1 / normal are self-hosted
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 60
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Install Nix'
        if: ${{ matrix.runner != 'MacM1' }}
        uses: cachix/install-nix-action@v31.2.0
        with:
          install_url: https://releases.nixos.org/nix/nix-2.24.12/install
          extra_nix_config: |
            substituters = http://cache.nixos.org https://cache.iog.io
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=
      - name: 'Install Cachix'
        if: ${{ matrix.runner != 'MacM1' }}
        uses: cachix/cachix-action@v16
        with:
          name: k-framework
      - name: 'Build Skribe'
        env:
          NIX_PATH: 'nixpkgs=http://nixos.org/channels/nixos-22.05/nixexprs.tar.xz'
          GC_DONT_GC: '1'
        run: |
          set -euxo pipefail
          nix --version
          JQ=$(nix-build '<nixpkgs>' -A jq --no-link)/bin/jq
          SKRIBE_BIN=$(nix build .#skribe.rust --print-build-logs --json | $JQ -r '.[].outputs | to_entries[].value')/bin
          echo $SKRIBE_BIN >> $GITHUB_PATH
      - name: 'Run smoke test'
        run: ./package/smoke-test.sh